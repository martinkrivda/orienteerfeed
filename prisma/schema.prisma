// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model Sport {
  id     Int     @id @default(autoincrement()) @db.UnsignedInt
  name   String  @unique
  events Event[]
}

model User {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  email     String   @unique
  firstname String
  lastname  String
  password  String   @db.VarChar(255)
  active    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  events    Event[]
  protocols Protocol[]
}

model Event {
  id        String   @id @default(cuid())
  sport     Sport    @relation(fields: [sportId], references: [id])
  sportId   Int      @db.UnsignedInt
  name      String
  organizer String?
  date      DateTime @db.Date
  location  String?
  zeroTime  DateTime @db.DateTime()
  relay     Boolean  @default(false)
  published Boolean  @default(false)
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  Int?     @db.UnsignedInt
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]
  protocols Protocol[]
}

model Class {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  event            Event        @relation(fields: [eventId], references: [id])
  eventId          String
  externalId       String?
  name             String
  length           Int?
  climb            Int?
  controlsCount    Int?
  competitorsCount Int?
  printedMaps      Int?
  minAge           Int?
  maxAge           Int?
  minTeamMembers   Int?
  maxTeamMembers   Int?
  sex              Sex          @default(B)
  status           ClassStatus  @default(NORMAL)
  competitors      Competitor[]
  teams            Team[]
}

model Competitor {
  id           Int          @id @default(autoincrement()) @db.UnsignedInt
  class        Class        @relation(fields: [classId], references: [id])
  classId      Int          @db.UnsignedInt
  firstname    String
  lastname     String
  nationality  String?      @db.Char(3)
  registration String       @db.VarChar(10)
  license      String?      @db.Char(1)
  ranking      Int?         @db.UnsignedInt
  organisation String?
  shortName    String?      @db.VarChar(10)
  card         Int?         @db.UnsignedInt
  startTime    DateTime?
  finishTime   DateTime?
  time         Int?
  team         Team?        @relation(fields: [teamId], references: [id])
  teamId       Int?         @db.UnsignedInt
  leg          Int?         @db.UnsignedInt
  status       ResultStatus @default(Inactive)
  lateStart    Boolean      @default(false)
  note         String?
  updatedAt    DateTime     @default(now()) @updatedAt
  protocols    Protocol[]
}

model Team {
  id            Int          @id @default(autoincrement()) @db.UnsignedInt
  class         Class        @relation(fields: [classId], references: [id])
  classId       Int          @db.UnsignedInt
  name          String
  organisation  String?
  shortName     String?      @db.VarChar(10)
  bibNumber     Int
  competitors   Competitor[]
}

model Protocol {
  id            Int          @id @default(autoincrement()) @db.UnsignedInt
  event         Event        @relation(fields: [eventId], references: [id])
  eventId       String
  competitor    Competitor   @relation(fields: [competitorId], references: [id])
  competitorId  Int          @db.UnsignedInt
  origin        Origin
  type          ProtocolType
  previousValue String       @db.VarChar(32)
  newValue      String       @db.VarChar(32)
  author        User         @relation(fields: [authorId], references: [id])
  authorId      Int          @db.UnsignedInt
  createdAt     DateTime     @default(now())
}

enum Sex {
  B
  M
  F
}

enum ClassStatus {
  NORMAL
  DIVIDED
  JOINED
  INVALIDATED
  INVALIDATEDNOFEE
}

enum ResultStatus {
  OK
  Finished
  MissingPunch
  Disqualified
  DidNotFinish
  Active
  Inactive
  OverTime
  SportingWithdrawal
  NotCompeting
  Moved
  MovedUp
  DidNotStart
  DidNotEnter
  Cancelled
}

enum Origin {
  START
}

enum ProtocolType {
  status_change
  si_card_change
}